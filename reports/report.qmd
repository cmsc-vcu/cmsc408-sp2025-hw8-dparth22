---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-dparth22>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx, config = create_db_wrapper(config_map)

```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) as total_records
from world_bank_data.wdi_country;
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select *
from world_bank_data.wdi_country
limit 5

""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx, """
select *
from wdi_country
where `Income Group` is null or `Region` is null;
""")

```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
# Create your own table in your own schema
execute_ddl(cnx, """
drop table if exists wdi_country;
create table wdi_country as
select *
from world_bank_data.wdi_country;
""")

# Count records in your new table
run_sql_and_return_html(cnx,"""
select count(*)
from wdi_country
where Region is not null;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(distinct `Country Code`) as "Countries in 2020"
from wdi_data
where Year = 2020;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct region
from world_bank_data.wdi_country
order by region;
""")
```
run_sql_and_return_html(cnx,"""
select *
from world_bank_data.wdi_country
limit 1;
""") 
run_sql_and_return_html(cnx,"""
select *
from world_bank_data.wdi_country
limit 1;
""")


## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select region, count(*) as country_count
from world_bank_data.wdi_country
where region is not null
group by region
order by country_count desc;
""")
```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Long Name`, `Region`
from world_bank_data.wdi_country
where `Region` = 'North America'
order by `Long Name`;
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Region`, `Short Name`, `Long Name`
from world_bank_data.wdi_country
where `Short Name` = 'Qatar';
""")
```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, `Region`
from world_bank_data.wdi_country
where `2-alpha code` != `WB-2 code`
order by `Short Name`;
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Income Group`, count(*) as count
from world_bank_data.wdi_country
where `Income Group` is not null
group by `Income Group`
order by count desc;
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx, """
select `Short Name`, `Region`, `Income Group`
from wdi_country
where `Income Group` is null;
""")

```
```{python}
execute_ddl(cnx,"""
drop table if exists wdi_country;
create table wdi_country as
select *
from world_bank_data.wdi_country
where region is not null;
""")
```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx, """
update wdi_country
set `Income Group` = 'High income'
where `Short Name` in ('Qatar', 'Venezuela');
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select `Short Name`, `Income Group`
from wdi_country
where `Short Name` = 'Qatar';
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Region`, `Income Group`, count(*) as num_countries
from wdi_country
where `Region` is not null
group by `Region`, `Income Group`
order by `Region`, `Income Group`;
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select 
  `Region`,
  sum(case when `Income Group` = 'High income' then 1 else 0 end) as High,
  sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end) as Upper_Middle,
  sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end) as Lower_Middle,
  sum(case when `Income Group` = 'Low income' then 1 else 0 end) as Low,
  sum(case when `Income Group` is null then 1 else 0 end) as Unknown,
  count(*) as Total
from wdi_country
group by `Region`
order by `Region`;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select count(*) as count, `Region`, `Income Group`
from wdi_country
where `Income Group` = 'Low income'
group by `Region`, `Income Group`
order by count desc
limit 1;
""")


```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `Region`, `Income Group`
from wdi_country
where `Region` = (
    select `Region` from wdi_country where `Country Code` = 'MHL'
)
and `Income Group` = (
    select `Income Group` from wdi_country where `Country Code` = 'MHL'
)
order by `Short Name`;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
select r.`Region`, i.`Income Group`
from 
  (select distinct `Region` from wdi_country) r
cross join
  (select distinct `Income Group` from wdi_country) i
left join
  (select `Region`, `Income Group` from wdi_country group by `Region`, `Income Group`) x
on r.`Region` = x.`Region` and i.`Income Group` = x.`Income Group`
where x.`Region` is null;
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
with base as (
  select `Region`, `Income Group`, count(*) as country_count
  from wdi_country
  where `Region` is not null
  group by `Region`, `Income Group`
),
totals as (
  select sum(count(*)) as total_count from wdi_country where `Region` is not null
)
select 
  base.`Region`,
  base.`Income Group`,
  base.country_count,
  round((base.country_count / (select total_count from totals)) * 100, 2) as percent_of_total
from base
order by percent_of_total desc;
""")

```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with base as (
  select `Region`, `Income Group`, count(*) as count
  from wdi_country
  where `Region` is not null
  group by `Region`, `Income Group`
),
totals as (
  select count(*) as total from wdi_country where `Region` is not null
)
select 
  `Region`,
  round(100 * sum(case when `Income Group` = 'High income' then count else 0 end)/(select total from totals), 2) as High,
  round(100 * sum(case when `Income Group` = 'Upper middle income' then count else 0 end)/(select total from totals), 2) as Upper_Middle,
  round(100 * sum(case when `Income Group` = 'Lower middle income' then count else 0 end)/(select total from totals), 2) as Lower_Middle,
  round(100 * sum(case when `Income Group` = 'Low income' then count else 0 end)/(select total from totals), 2) as Low,
  round(100 * sum(case when `Income Group` is null then count else 0 end)/(select total from totals), 2) as Unknown
from base
group by `Region`
order by `Region`;
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx, """
select 
  `Income Group`,
  count(*) as country_count,
  round(100.0 * count(*) / (select count(*) from wdi_country), 2) as percent_of_total
from wdi_country
group by `Income Group`
order by percent_of_total desc;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

Throughout these exercises, I became more confident using SQL skills like SELECT, GROUP BY, ORDER BY, and conditional aggregation with CASE. I also got more comfortable with JOINs and CTEs.  I need more practice with complex joins and nested subqueries, especially for tasks involving missing data combinations.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For complex tasks like 18, 23, and 24, I started by breaking down the problem into small steps and understanding the relationships between the tables. I used subqueries and CTEs to isolate necessary data before combining them. When I got errors, I checked the schema or simplified the query to test each part.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

This assignment showed how SQL can be used not just to extract data, but also to clean, reshape, and analyze it. I learned how important it is to understand the data schema and how to approach missing or inconsistent values. 


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

